/*------------------------------------
        Здравствуй, человек!
        Чтобы получить ключ
        поработай с комментариями.
-------------------------------------*/

#include <stdio.h>
#define NMAX 10

void input(int *buffer, int *length);
void output(int *buffer, int length);
int sum_numbers(int *buffer, int length);
int find_numbers(int *buffer, int length, int number, int *numbers);

    /*------------------------------------
            Функция получает массив данных
            через stdin.
            Выдает в stdout особую сумму
            и сформированный массив
            специальных элементов
            (выбранных с помощью найденной суммы):
            это и будет частью ключа
    -------------------------------------*/
int main() {
    int length;
    int buffer[NMAX], output_buffer[NMAX];
    input(buffer, &length);
    int sum_value = sum_numbers(buffer, length);

    int output_length = find_numbers(buffer, length, sum_value, output_buffer);
    printf("%d\n", sum_value);
    output(output_buffer, output_length);
}

void input(int *buffer, int *length) {
    scanf("%d", length);
    for(int *p = buffer; p - buffer < *length; p++)
    {
        scanf("%d", p);
    }
}

void output(int *buffer, int length) {
    for(int *p = buffer; p - buffer < length; p++)
    {
        printf("%d", *p);
        if ((p - buffer) < (length-1)) {
            printf(" ");
        }
    }
    printf("\n");
}

/*------------------------------------
        Функция должна находить
        сумму четных элементов
        с 0-й позиции.
-------------------------------------*/
int sum_numbers(int *buffer, int length) {
    int sum = 0;

    for (int i = 0; i < length; i++) {
        if (buffer[i] % 2 == 0) {
            sum = sum + buffer[i];
        }
    }

    return sum;
}

/*------------------------------------
        Функция должна находить
        все элементы, на которые нацело
        делится переданное число и
        записывает их в выходной массив.
-------------------------------------*/
int find_numbers(int *buffer, int length, int number, int *numbers) {
    int output_index = 0;
    for (int input_index = 0; input_index < length; input_index++) {
        int input_value = buffer[input_index];
        if (input_value != 0 || number % input_value == 0) {
            numbers[output_index] = input_value;
            output_index++;
        }
    }
    return output_index;
}
